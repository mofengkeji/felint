(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{206:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"lint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint","aria-hidden":"true"}},[t._v("#")]),t._v(" Lint")]),t._v(" "),a("h2",{attrs:{id:"commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg","aria-hidden":"true"}},[t._v("#")]),t._v(" commit msg")]),t._v(" "),a("h3",{attrs:{id:"why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why","aria-hidden":"true"}},[t._v("#")]),t._v(" Why")]),t._v(" "),a("p",[t._v("我们不允许无意义、混乱的msg，类似于 "),a("code",[t._v("git commit -m '123'")]),t._v("，这会让提交历史惨不忍睹，也不利于浏览改动历史，不利于意会每一次的改动意图或者内容。而规范的commit msg可以让我们获得很多好处：")]),t._v(" "),a("ol",[a("li",[t._v("提供更多的历史信息，方便快速浏览。")])]),t._v(" "),a("p",[t._v("下面是一个遵循了一定规范的例子（格式还是有点问题）")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log HEAD --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:%s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 漂亮地打印出提交历史")]),t._v("\n\nfix: 选择银行样式更改\nfix: 选择银行页面被之前的滚动穿透代码影响，把选择银行中有滚动穿透的代码去掉（选择年月的滚动穿透代码未删除）\nfix 去掉路由进入组件ChooseCard\nfix 银行选择\nfeat 新增搜索银行\nfix 海报页面清除setTimeout\nfix 推荐人必填\nfix picker穿透\nfix 跳转到添加银行卡时，遗漏参数\nfix ios穿透问题\nfix 借记卡贷记卡更改\nfix 认证成功跳转\nfix 银行卡\nfix: picker\nfix 注册弹框显示关注二维码\nfix 选择海报页图片懒加载\nfix 收款页面删除按钮样式\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("可以直接从commit生成Change log。")])]),t._v(" "),a("p",[t._v("Change Log 是发布新版本时，用来说明与上一个版本差异的文档，用工具自动生成即可")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("让源码管理更有意义")])]),t._v(" "),a("p",[t._v("下文我们会说到，我们会将commit msg分为几种类型：新功能、修补bug、文档改动、格式改动、重构、增加测试。当我们接手项目时，通常我们会被指派实现多个需求、修复一大堆bug，很多人习惯全部写完之后一股脑的commit push上去，这种做法实际上反映出了你在代码管理方面极差的控制力。")]),t._v(" "),a("p",[t._v("git管理的意义就在于，我们能够恢复糟糕、不稳定的改动，并且结构化地浏览它们，而不是单纯得文件上传。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("帮助你写代码时标签化、任务化")])]),t._v(" "),a("p",[t._v("我们推崇的是，将你的任务划分为上述得几个改动类型，每一次改动完后就提交一次。这能够帮助你清晰地了解到你的任务反映在代码上做了什么类型的改动，并且帮助你更好地了解这次改动可能波及到的范围（我们通常不希望一个功能改动后影响到其他功能）")]),t._v(" "),a("h3",{attrs:{id:"angular规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#angular规范","aria-hidden":"true"}},[t._v("#")]),t._v(" Angular规范")]),t._v(" "),a("p",[t._v("社区有多种 Commit message 的写法规范。而我们遵循Angular规范，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。")]),t._v(" "),a("h4",{attrs:{id:"格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式","aria-hidden":"true"}},[t._v("#")]),t._v(" 格式")]),t._v(" "),a("p",[t._v("每次提交，Commit message 都应该包括三个部分：Header，Body 和 Footer。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n")])])]),a("p",[t._v("其中，Header 是必需的，Body 和 Footer 可以省略。")]),t._v(" "),a("p",[a("code",[t._v("type")]),t._v("用于说明 commit 的类别，只允许使用下面7个标识。")]),t._v(" "),a("ul",[a("li",[t._v("feat：新功能（feature）")]),t._v(" "),a("li",[t._v("fix：修补bug")]),t._v(" "),a("li",[t._v("docs：文档（documentation）")]),t._v(" "),a("li",[t._v("style： 格式（不影响代码运行的变动）")]),t._v(" "),a("li",[t._v("refactor：重构（即不是新增功能，也不是修改bug的代码变动）")]),t._v(" "),a("li",[t._v("test：增加测试")]),t._v(" "),a("li",[t._v("chore：构建过程或辅助工具的变动")])]),t._v(" "),a("p",[t._v("如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。")]),t._v(" "),a("p",[a("code",[t._v("scope")]),t._v("用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，或者用户模块、推广模块、商品模块。")]),t._v(" "),a("p",[a("code",[t._v("subject")]),t._v("是 commit 目的的简短描述，不超过50个字符。")]),t._v(" "),a("p",[a("code",[t._v("body")]),t._v("则是详细描述")]),t._v(" "),a("p",[t._v("如果当前代码与上一个版本不兼容，则 "),a("code",[t._v("footer")]),t._v(" 部分以"),a("code",[t._v("BREAKING CHANGE")]),t._v("开头，后面是对变动的描述、以及变动理由和迁移方法。")]),t._v(" "),a("h3",{attrs:{id:"配套工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配套工具","aria-hidden":"true"}},[t._v("#")]),t._v(" 配套工具")]),t._v(" "),a("ul",[a("li",[t._v("commitizen")])]),t._v(" "),a("p",[t._v("用于生成angular规范commit msg")]),t._v(" "),a("p",[t._v("全局安装")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -g commitizen\n")])])]),a("p",[t._v("然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("commitizen init cz-conventional-changelog --save --save-exact\n")])])]),a("p",[t._v("以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png",alt:"cz"}})]),t._v(" "),a("ul",[a("li",[t._v("commitlint, husky")])]),t._v(" "),a("p",[t._v("husky允许我们在commit前运行命令，commitlint帮助我们检查commit msg")]),t._v(" "),a("p",[t._v("安装至dev依赖")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# husky")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i --save-dev husky\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commitlint")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @commitlint/config-conventional @commitlint/cli\n")])])]),a("p",[t._v("在根目录添加"),a("code",[t._v("commitlint.config.js")]),t._v("配置文件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@commitlint/config-conventional'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("配置commit前要执行的脚本")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("standard-version")])]),t._v(" "),a("p",[t._v("用于生成changelog，规划版本，当我们需要发布线上版本时，必须执行")]),t._v(" "),a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i --save-dev standard-version\n")])])]),a("p",[t._v("添加 "),a("code",[t._v("npm run release")]),t._v("脚本，并且在push前执行它")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"release"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard-version -p angular -i CHANGELOG.md -w"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint","aria-hidden":"true"}},[t._v("#")]),t._v(" eslint")]),t._v(" "),a("p",[t._v("eslint是一个帮助我们对代码格式进行约束的包")]),t._v(" "),a("p",[t._v("只需要在项目安装后，在项目根目录添加规则配置文件 "),a("code",[t._v(".eslintrc.js")]),t._v(" ，利用IDE例如VSCode，就可以再保存时自动格式化代码")]),t._v(" "),a("p",[t._v("vscode配置片段（其他ide请自行百度）")]),t._v(" "),a("blockquote",[a("p",[t._v("File->Preferences->Settings->搜索eslint->找到Edit in settings.json")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// settings.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"eslint.autoFixOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"eslint.validate"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"javascript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"language"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"autoFix"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("p",[t._v("所有类型的项目必须配置eslint，不然当你发布正式环境时，CI (自动部署工具)会拒绝部署。")]),t._v(" "),a("blockquote",[a("p",[t._v("具体安装配置方法请查看"),a("a",{attrs:{href:"https://github.com/mofengkeji/eslint-config-mofengkeji",target:"_blank",rel:"noopener noreferrer"}},[t._v("共享配置仓库"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("配置"),a("code",[t._v("npm run lint")]),t._v("脚本，可以批量格式化代码")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --fix --ext .js,.vue src"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("p",[t._v("重新配置husky")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint && commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])},[],!1,null,null,null);s.default=e.exports}}]);